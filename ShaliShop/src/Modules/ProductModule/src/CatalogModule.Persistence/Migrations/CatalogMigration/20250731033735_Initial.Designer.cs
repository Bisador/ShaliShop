// <auto-generated />
using System;
using CatalogModule.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CatalogModule.Persistence.Migrations.CatalogMigration
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20250731033735_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("catalog")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatalogModule.Domain.Products.Aggregates.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Products", "catalog");
                });

            modelBuilder.Entity("CatalogModule.Domain.Products.Aggregates.Product", b =>
                {
                    b.OwnsOne("SharedModule.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PriceCurrency");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsMany("CatalogModule.Domain.Products.Aggregates.ProductVariant", "Variants", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Sku")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("_options")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Options");

                            b1.HasKey("ProductId", "Id");

                            b1.ToTable("ProductVariants", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsOne("SharedModule.Domain.ValueObjects.Money", "PriceOverride", b2 =>
                                {
                                    b2.Property<Guid>("ProductVariantProductId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("ProductVariantId")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("PriceOverrideAmount");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("PriceOverrideCurrency");

                                    b2.HasKey("ProductVariantProductId", "ProductVariantId");

                                    b2.ToTable("ProductVariants", "catalog");

                                    b2.WithOwner()
                                        .HasForeignKey("ProductVariantProductId", "ProductVariantId");
                                });

                            b1.Navigation("PriceOverride");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Variants");
                });
#pragma warning restore 612, 618
        }
    }
}
