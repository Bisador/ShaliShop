// <auto-generated />
using System;
using CheckoutModule.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CheckoutModule.Persistence.Migrations.Checkout
{
    [DbContext(typeof(CheckoutDbContext))]
    partial class CheckoutDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("checkout")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CheckoutModule.Domain.Carts.Aggregates.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts", "checkout");
                });

            modelBuilder.Entity("CheckoutModule.Domain.Carts.Aggregates.Cart", b =>
                {
                    b.OwnsMany("CheckoutModule.Domain.Carts.ValueObjects.CartItem", "Items", b1 =>
                        {
                            b1.Property<Guid>("CartId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ProductName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("CartId", "ProductId");

                            b1.ToTable("CartItems", "checkout");

                            b1.WithOwner()
                                .HasForeignKey("CartId");

                            b1.OwnsOne("SharedModule.Domain.ValueObjects.Money", "UnitPrice", b2 =>
                                {
                                    b2.Property<Guid>("CartItemCartId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("CartItemProductId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("UnitPrice");

                                    b2.Property<string>("Currency")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("CartItemCartId", "CartItemProductId");

                                    b2.ToTable("CartItems", "checkout");

                                    b2.WithOwner()
                                        .HasForeignKey("CartItemCartId", "CartItemProductId");
                                });

                            b1.Navigation("UnitPrice")
                                .IsRequired();
                        });

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
